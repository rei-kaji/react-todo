[{"/Users/kajiwararei/Desktop/Code/react-todo/src/index.js":"1","/Users/kajiwararei/Desktop/Code/react-todo/src/App.js":"2","/Users/kajiwararei/Desktop/Code/react-todo/src/reportWebVitals.js":"3","/Users/kajiwararei/Desktop/Code/react-todo/src/components/Todo.js":"4","/Users/kajiwararei/Desktop/Code/react-todo/src/components/Form.js":"5","/Users/kajiwararei/Desktop/Code/react-todo/src/components/FilterButton.js":"6"},{"size":722,"mtime":1651163778471,"results":"7","hashOfConfig":"8"},{"size":2598,"mtime":1651209299066,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1651038842321,"results":"10","hashOfConfig":"8"},{"size":2552,"mtime":1651208113589,"results":"11","hashOfConfig":"8"},{"size":1021,"mtime":1651171462897,"results":"12","hashOfConfig":"8"},{"size":428,"mtime":1651208955865,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"1rw22e3",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"/Users/kajiwararei/Desktop/Code/react-todo/src/index.js",[],[],[],"/Users/kajiwararei/Desktop/Code/react-todo/src/App.js",["34"],[],"import React, { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport Todo from \"./components/Todo\";\n\nconst FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\n\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nfunction App(props) {\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState('All');\n\n  function addTask(name) {\n    const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\n    setTasks([...tasks, newTask]);\n  }\n  \n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return {...task, completed: !task.completed}\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n    // if this task has the same ID as the edited task\n      if (id === task.id) {\n        return {...task, name: newName}\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n  \n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }  \n  \n  \n  const taskList = tasks\n      .filter(FILTER_MAP[filter])\n      .map(task => (\n        <Todo\n          id={task.id}\n          name={task.name}\n          completed={task.completed}\n          key={task.id}\n          toggleTaskCompleted={toggleTaskCompleted}\n          deleteTask={deleteTask}\n          editTask={editTask}\n        />\n    ));\n\n\n  const filterList = FILTER_NAMES.map(name => (\n    <FilterButton\n      key={name}\n      name={name}\n      isPressed={name === filter}\n      setFilter={setFilter}\n    />\n  ));\n  \n\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n  \n  return (\n    <div className=\"todoapp stack-large\">\n      <h1>Todo List</h1>\n      <h2> created with React</h2>\n      <Form addTask={addTask}/>\n      <div className=\"filters btn-group stack-exception\">\n        {filterList}\n      </div>\n      <h2 id=\"list-heading\">\n        {headingText}\n      </h2>\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/kajiwararei/Desktop/Code/react-todo/src/reportWebVitals.js",[],[],"/Users/kajiwararei/Desktop/Code/react-todo/src/components/Todo.js",[],[],"/Users/kajiwararei/Desktop/Code/react-todo/src/components/Form.js",[],[],"/Users/kajiwararei/Desktop/Code/react-todo/src/components/FilterButton.js",[],[],{"ruleId":"35","severity":1,"message":"36","line":95,"column":7,"nodeType":"37","endLine":99,"endColumn":8},"jsx-a11y/no-redundant-roles","The element ul has an implicit role of list. Defining this explicitly is redundant and should be avoided.","JSXOpeningElement"]